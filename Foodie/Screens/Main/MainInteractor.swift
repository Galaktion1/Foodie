//
//  MainInteractor.swift
//  Foodie
//
//  Created by Gaga Nizharadze on 17.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps
import CoreLocation

protocol MainBusinessLogic {
    func getUsername()
    func logOut()
    func getDistance(currentLocation: CLLocation)
    func setAllRestaurants()
    func sortByNearby()
    func setFavouriteRestaurants()
    func sortForTopAllRestaurants()
    func numberOfItemsInSection() -> Int
    func restaurantsCellForRowAt(indexPath: IndexPath) -> Restaurant
    func getRestaurantImageURL(indexPath: IndexPath) -> String?
    func foodsCellForItemAt(indexPath: IndexPath) -> Food?
    func fetchRestaurantsData()
    
    var specialRestaurantsArray: [Restaurant] { get set }
    func setSection(request: Main.Something.Request)
}

protocol MainDataStore {
    //var name: String { get set }
}

final class MainInteractor: MainBusinessLogic, MainDataStore {
    
    var presenter: MainPresentationLogic
    var worker: MainWorker
    
    init(presenter: MainPresentationLogic, worker: MainWorker) {
        self.presenter = presenter
        self.worker = worker
    }
    //var name: String = ""
    
    // MARK: Do something
    
    
    private let globalQueue = DispatchQueue.global()
    
    // MARK: - Variables
    var allRestaurants = [Restaurant](){
        didSet {
            specialRestaurantsArray = allRestaurants
            presenter.confLocationManager()
        }
    }
    
    var specialRestaurantsArray = [Restaurant]() {
        didSet {
            DispatchQueue.main.async {
                self.presenter.reloadCollectionViewData()
            }
        }
    }
    
    private var firebaseManager = FirebaseManager()
    
    // MARK: - Funcs
    func fetchRestaurantsData() {
        worker.fetchRestaurantsData { [weak self] restaurants in
            self?.allRestaurants = restaurants
        }
    }
    
    func setSection(request: Main.Something.Request) {
        switch request.section {
        case .all:
            setAllRestaurants()
        case .top:
            sortForTopAllRestaurants()
        case .nearby:
            sortByNearby()
        case .favourite:
            setFavouriteRestaurants()
        }
    }
    
    
    func getUsername() {
        firebaseManager.getUsername  { [weak self] username  in
            self?.presenter.presentUserNameLabel(username: username)
        }
    }
    
    func logOut() {
        firebaseManager.logoutUser { [weak self] in
            self?.presenter.logOut()
        }
    }
    
    func getDistance(currentLocation: CLLocation) {
        for index in 0 ..< allRestaurants.count {
            let locationService = LocationService(coordinators: allRestaurants[index].descriptions.coordinates)
            allRestaurants[index].distance = locationService.getDistanceString(currentLocation: currentLocation)
        }
    }
    
    // MARK: - Functions for: all, nearby, fav and top restaurants sections.
    func setAllRestaurants() {
        specialRestaurantsArray = allRestaurants
    }
    
    
    func sortByNearby() {
        globalQueue.async {
            if let _ = self.allRestaurants.first?.distance {
                self.specialRestaurantsArray = (self.allRestaurants.sorted { Double($0.distance!)! < Double($1.distance!)! })
            }
        }
    }
    
    
    func setFavouriteRestaurants() {
        globalQueue.async {
            let favouriteRestaurantIds = UserDefaults.standard.array(forKey: "favRestaurantsIds") as? [Int] ?? []
            self.specialRestaurantsArray = self.specialRestaurantsArray.filter { favouriteRestaurantIds.contains($0.id) }
        }
    }
    
    
    func sortForTopAllRestaurants() {
        globalQueue.async {
            self.specialRestaurantsArray = self.allRestaurants.sorted { $0.rating > $1.rating }
        }
    }
    
    
    //MARK: - Functions for CollectionViews
    func numberOfItemsInSection() -> Int {
        specialRestaurantsArray.count
    }
    
    
    func restaurantsCellForRowAt(indexPath: IndexPath) -> Restaurant {
        specialRestaurantsArray[indexPath.row]
    }
    
    
    func getRestaurantImageURL(indexPath: IndexPath) -> String?  {
        specialRestaurantsArray[indexPath.row].restaurantImg
    }
    
    func foodsCellForItemAt(indexPath: IndexPath) -> Food? {
        specialRestaurantsArray[indexPath.row].foods?.first
    }
    
}
