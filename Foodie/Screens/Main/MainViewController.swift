//
//  MainViewController.swift
//  Foodie
//
//  Created by Gaga Nizharadze on 17.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps
import CoreLocation


protocol MainDisplayLogic: AnyObject {
    //    func displaySomething(viewModel: Main.Something.ViewModel)
    func reloadCollectionView()
    func configureLocationManager()
    func displayUserName(response: Main.Something.Response)
    func logOut()
}

final class MainViewController: UIViewController, Storyboarded, MainDisplayLogic {
    
    // MARK: - Outlets
    @IBOutlet weak var restaurantsCollectionView: UICollectionView!
    @IBOutlet weak var recomendedDishesCollectionView: UICollectionView!
    
    @IBOutlet weak var helloToUserLabel: UILabel!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var backgroundView: UIView!
    @IBOutlet weak var activeIndicatorView: UIView!
    
    @IBOutlet weak var searchTextField: DesignableUITextField!
    @IBOutlet weak var allRestaurantsButtonOutlet: UIButton!
    @IBOutlet weak var nearbyButtonOutlet: UIButton!
    @IBOutlet weak var favouriteRestaurantsButtonOutlet: UIButton!
    @IBOutlet weak var topButtonOutlet: UIButton!
    
    //MARK: - UIComponent
    private let logOutButton: UIButton = {
        let button = UIButton()
        button.setImage(UIImage(systemName: "rectangle.portrait.and.arrow.right"), for: .normal) // constantashi
        button.translatesAutoresizingMaskIntoConstraints = false
        
        return button
    }()
    
    // amat marki
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?  // es agar minda
    
    var coordinator: MainViewCoordinator?
    
    
    private let locationManager = CLLocationManager()
    
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.fetchRestaurantsData()
        
        configureCollectionViews()
        allRestaurantsButtonOutlet.tintColor = CustomColors.specialOrangeColor
        restaurantsCollectionView.backgroundColor = .clear
        recomendedDishesCollectionView.backgroundColor = UIColor(patternImage: CustomImages.backgroundImage!)
        searchTextField.delegate = self
        getUsername()
        logOutButton.addTarget(self, action: #selector(logOutFunctionality), for: .touchUpInside)
        logOut()
        self.hideKeyboardWhenTappedAround()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        restaurantsCollectionView.reloadData()  // სხვა სქრინიდან ყოველი დაბრუნებისას განახლდეს ინფო, რადგან მომხმარებელმა შესაძლოა დააფავორიტოს რესტორანი.
        navigationController?.isNavigationBarHidden = true
    }
    
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        confLogOutButton()
        self.scrollView.backgroundColor = UIColor(patternImage: CustomImages.backgroundImage!)
        backgroundView.backgroundColor = .clear
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        navigationController?.isNavigationBarHidden = false
    }
    
  
    
    // MARK: - IBActions
    @IBAction func allRestaurantsButtonAction(_ sender: UIButton) {
        //        interactor?.setAllRestaurants()
        interactorCall()
        moveActiveIndicatorView(mainButton: allRestaurantsButtonOutlet,
                                button2: nearbyButtonOutlet,
                                button3: favouriteRestaurantsButtonOutlet,
                                button4: topButtonOutlet,
                                indicatorView: activeIndicatorView)
    }
    
    
    @IBAction func nearbyButtonAction(_ sender: UIButton) {
        //        interactor?.sortByNearby()
        interactorCall(.nearby)
        moveActiveIndicatorView(mainButton: nearbyButtonOutlet,
                                button2: allRestaurantsButtonOutlet,
                                button3: favouriteRestaurantsButtonOutlet,
                                button4: topButtonOutlet,
                                indicatorView: activeIndicatorView)
    }
    
    
    @IBAction func favouriteRestaurantsButtonAction(_ sender: UIButton) {
        //        interactor?.setFavouriteRestaurants()
        interactorCall(.favourite)
        moveActiveIndicatorView(mainButton: favouriteRestaurantsButtonOutlet,
                                button2: nearbyButtonOutlet,
                                button3: allRestaurantsButtonOutlet,
                                button4: topButtonOutlet,
                                indicatorView: activeIndicatorView)
        
    }
    
    
    @IBAction func topButtonAction(_ sender: UIButton) {
        //        interactor?.sortForTopAllRestaurants()
        interactorCall(.top)
        moveActiveIndicatorView(mainButton: topButtonOutlet,
                                button2: nearbyButtonOutlet,
                                button3: favouriteRestaurantsButtonOutlet,
                                button4: allRestaurantsButtonOutlet,
                                indicatorView: activeIndicatorView)
    }
    
    
    // MARK: - Funcs
    private func interactorCall(_ restaurant: RestaurantsSection = .all) {  // shecvale saxeli
        let request = Main.Something.Request(section: restaurant)
        interactor?.setSection(request: request)
    }
    
    func reloadCollectionView() {
        restaurantsCollectionView.reloadData()
        recomendedDishesCollectionView.reloadData()
    }
    
    @objc private func logOutFunctionality() {
        interactor?.logOut()
    }
    
    func logOut() {
        router?.logOut()
    }
    
    private func confLogOutButton() {
        view.addSubview(logOutButton)
        
        NSLayoutConstraint.activate([
            logOutButton.topAnchor.constraint(equalTo: backgroundView.topAnchor, constant: 5),
            logOutButton.trailingAnchor.constraint(equalTo: backgroundView.trailingAnchor, constant: -20),
            logOutButton.widthAnchor.constraint(equalToConstant: 30),
            logOutButton.heightAnchor.constraint(equalToConstant: 30)
        ])
    }
    
    func configureLocationManager() {
        
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        locationManager.startUpdatingLocation()
        locationManager.distanceFilter = 500 // distance changes you want to be informed about (in meters)
        locationManager.desiredAccuracy = 10 // biggest approximation you tolerate (in meters)
        locationManager.activityType = .automotiveNavigation // .automotiveNavigation will stop the updates when the device is not moving
    }
    
    private func getUsername() {
        interactor?.getUsername()
    }
    
    func displayUserName(response: Main.Something.Response) {
        helloToUserLabel.text = "Hello \(response.username.capitalized), Welcome back!"
    }
    
    private func configureCollectionViews() {
        let nibRestaurant = UINib(nibName: "RestaurantsCollectionViewCell", bundle: nil)
        restaurantsCollectionView.register(nibRestaurant, forCellWithReuseIdentifier: "RestaurantsCollectionViewCell")
        restaurantsCollectionView.delegate = self
        restaurantsCollectionView.dataSource = self
        
        let nibDish = UINib(nibName: "DishCollectionViewCell", bundle: nil)
        recomendedDishesCollectionView.register(nibDish, forCellWithReuseIdentifier: "DishCollectionViewCell")
        recomendedDishesCollectionView.delegate = self
        recomendedDishesCollectionView.dataSource = self
        
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        
        recomendedDishesCollectionView.setCollectionViewLayout(layout, animated: true)
    }
    
    private func moveActiveIndicatorView(mainButton: UIButton, button2: UIButton, button3: UIButton, button4: UIButton, indicatorView: UIView) {
        mainButton.tintColor = CustomColors.specialOrangeColor
        button2.tintColor = .systemGray
        button3.tintColor = .systemGray
        button4.tintColor = .systemGray
        
        let xCoordinant = mainButton.frame.origin.x
        let mainButtonWidth = mainButton.frame.width
        
        UIView.animate(withDuration: 0.5, delay: 0.0, options:[], animations: {
            indicatorView.transform = CGAffineTransform(translationX: xCoordinant, y: 0)
            indicatorView.frame.size.width = mainButtonWidth
        }, completion: nil)
    }
}


// MARK: - Collection View Extension
extension MainViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        collectionView == self.restaurantsCollectionView ? CGSize(width: 145 , height: 180 ) : CGSize(width: 105 , height: 125)
    }
    
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        interactor?.numberOfItemsInSection() ?? 0
    }
    
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == self.restaurantsCollectionView {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "RestaurantsCollectionViewCell", for: indexPath) as! RestaurantsCollectionViewCell
            
            let currentData = interactor?.restaurantsCellForRowAt(indexPath: indexPath)
            
            cell.data = currentData
            cell.checkIfFav(id: currentData!.id)
            
            return cell
        }
        else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "DishCollectionViewCell", for: indexPath) as! DishCollectionViewCell
            
            cell.data = interactor?.foodsCellForItemAt(indexPath: indexPath)
            
            return cell
        }
    }
    
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        if collectionView == self.restaurantsCollectionView {
            guard let restaurant = interactor?.restaurantsCellForRowAt(indexPath: indexPath) else { return }
            
            coordinator?.moveToMenu(of: restaurant)
        }
        else if collectionView == self.recomendedDishesCollectionView {
            guard let food = interactor?.foodsCellForItemAt(indexPath: indexPath) else { return }
            
            coordinator?.seeInfo(about: food)
        }
    }
}


extension MainViewController: UITextFieldDelegate {
    
    // MARK: - Text Field Delegate Function For Each Changes In Textfield.
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        var filtered = [Restaurant]()
        
        if (searchTextField.text?.count)! != 0 {
            filtered.removeAll()
            guard let specialArray = interactor?.specialRestaurantsArray else { return false }
            for each in specialArray {
                let range = each.name.lowercased().range(of: textField.text!, options: .caseInsensitive, range: nil, locale: nil)
                if range != nil {
                    filtered.append(each)
                }
            }
            interactor?.specialRestaurantsArray = filtered
        }
        return true
    }
}

// MARK: - LocationManager Delegate Extension To Get Current Location.
extension MainViewController: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        
        guard let currentLocation = locations.first?.coordinate else { return }
        interactor?.getDistance(currentLocation: CLLocation(latitude: currentLocation.latitude, longitude: currentLocation.longitude))
    }
}



